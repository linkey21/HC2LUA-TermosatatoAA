{"name":"termostadoAA","type":"virtual_device","properties":{"deviceIcon":24,"currentIcon":"24","log":"","logTemp":"","mainLoop":"--[[ termostatoAA\n\tDispositivo virtual\n\tmainLoop.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nlocal iconON = 24\nlocal iconOFF = 23\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\nONOFF\t\tON\t\tOFF\nMODE\t\tAUTO\tHEAT\tDRY\t\tFAN\t\tCOOL\nSETPTEMP\tx10\nFANSP\t\t1\t\t2\t\t3\t\t4\n--]]\nfunction getSetAA(option, functionName, argument)\n  if argument then argument = ','..argument else argument = '' end\n  local command = option..',1:'..functionName..argument..'\\r\\n'\n  local ip = fibaro:getValue(_selfId, 'IPAddress')\n  local port = fibaro:getValue(_selfId, 'TCPPort')\n  -- esperar para no colisionar con otra solicitud\n  fibaro:sleep(1000)\n  tcpSocket = Net.FTcpSocket(ip, port)\n  tcpSocket:setReadTimeout(1000)\n  result, errCode = tcpSocket:write(command)\n  if errCode == 0 then\n    statusLabel, statusErr = tcpSocket:read()\n    if statusErr == 0 then\n      tcpSocket:disconnect()\n      return statusLabel, statusErr\n    end\n    tcpSocket:disconnect()\n    return 'Err', statusErr\n  end\n  tcpSocket:disconnect()\n  return 'Err', errCode\nend\n\n-- actualizar id de dispositivo\nfibaro:call(_selfId, \"setProperty\", \"ui.idLabel.value\", 'id: '.._selfId)\n\nwhile true do\n  -- obtener estado\n  statusLabel, statusErr = getSetAA('GET', 'ONOFF')\n  local onOffLabel\n  if statusLabel and statusErr == 0 then -- si ha ido bien se refresca el valor\n    local p2 = string.find(statusLabel, 'ONOFF,')\n    onOffLabel = string.sub(statusLabel, p2 + 6,  #statusLabel - 2)\n  else -- sino hay error se usa el valor de la etiqueta\n    -- obtener etiqueta actual\n    local modeLabel = fibaro:get(_selfId, \"ui.modeLabel.value\")\n    local p1 = string.find(modeLabel, 'Status:')\n    local p2 = string.find(modeLabel, 'Mode:')\n    onOffLabel = string.sub(modeLabel, p1 + 7, p2 - 2)\n  end\n  fibaro:debug(onOffLabel)\n\n  -- obtener velocidad ventilador\n  statusLabel, statusErr = getSetAA('GET', 'FANSP')\n  local fanspLabel\n  if statusLabel and statusErr == 0 then -- si ha ido bien se refresca el valor\n    local p2 = string.find(statusLabel, 'FANSP,')\n    fanspLabel = string.sub(statusLabel, p2 + 6, #statusLabel - 2)\n  else -- sino hay error se usa el valor de la etiqueta\n    -- obtener etiqueta actual\n    local modeLabel = fibaro:get(_selfId, \"ui.modeLabel.value\")\n    local p1 = string.find(modeLabel, 'Fan:')\n    fanspLabel = string.sub(modeLabel, p1 + 4)\n  end\n  if fanspLabel == 'AUTO' then fanspLabel = 'A' end\n  fibaro:debug(fanspLabel)\n\n  -- obtener modo\n  statusLabel, statusErr = getSetAA('GET', 'MODE')\n  local modeIcon\n  if statusLabel and statusErr == 0 then -- si ha ido bien se refresca el valor\n    local p2 = string.find(statusLabel, 'MODE,')\n    local modeLabel = string.sub(statusLabel, p2 + 5, #statusLabel - 2)\n    if modeLabel == 'COOL' then modeIcon = '❄️'\n    elseif modeLabel == 'DRY' then modeIcon = '💧'\n    elseif modeLabel == 'HEAT' then modeIcon = '☀️'\n    elseif modeLabel == 'FAN' then modeIcon = '♻️'\n    else modeIcon = 'A'\n    end\n  else -- sino hay error se usa el valor de la etiqueta\n    -- obtener etiqueta actual\n    local modeLabel = fibaro:get(_selfId, \"ui.modeLabel.value\")\n    local p1 = string.find(modeLabel, 'Mode:')\n    local p2 = string.find(modeLabel, 'Fan:')\n    modeIcon = string.sub(modeLabel, p1 + 5, p2 - 2)\n  end\n  fibaro:debug(modeIcon)\n\n  -- obtener temperatura ambiente\n  statusLabel, statusErr = getSetAA('GET', 'AMBTEMP')\n  local ambtempLabel\n  if statusLabel and statusErr == 0 then -- si ha ido bien se refresca el valor\n    local p2 = string.find(statusLabel, 'AMBTEMP,')\n    ambtempLabel = tonumber(string.sub(statusLabel, p2 + 8 )) / 10\n    ambtempLabel = string.format('%.1f', ambtempLabel)..'ºC'\n  else -- sino hay error se usa el valor de la etiqueta\n    -- obtener etiqueta actual\n    local tempLabel = fibaro:get(_selfId, \"ui.tempLabel.value\")\n    local p1 = string.find(tempLabel, '/')\n    ambtempLabel = string.sub(tempLabel, 1, p1 - 2)\n  end\n  fibaro:debug(ambtempLabel)\n\n  -- obtener temperatura consigna\n  statusLabel, statusErr = getSetAA('GET', 'SETPTEMP')\n  local setptempLabel\n  if statusLabel and statusErr == 0 then -- si ha ido bien se refresca el valor\n    local p2 = string.find(statusLabel, 'SETPTEMP,')\n    setptempLabel = tonumber(string.sub(statusLabel, p2 + 9 )) / 10\n    setptempLabel = string.format('%.1f', setptempLabel)..'ºC'\n  else -- sino hay error se usa el valor de la etiqueta\n    -- obtener etiqueta actual\n    local tempLabel = fibaro:get(_selfId, \"ui.tempLabel.value\")\n    local p1 = string.find(tempLabel, '/')\n    setptempLabel = string.sub(tempLabel, p1 + 2)\n  end\n  fibaro:debug(setptempLabel)\n\n  -- actualizar etiqueta de estado modo y velocidad ventilador\n  fibaro:call(_selfId, \"setProperty\", \"ui.modeLabel.value\",\n  'Status:'..onOffLabel..' Mode:'..modeIcon..' Fan:'..fanspLabel)\n\n  -- actualizar etiqueta de temperatura\n  fibaro:call(_selfId, \"setProperty\", \"ui.tempLabel.value\",\n   ambtempLabel..' / '..setptempLabel)\n\n  -- actualizar log\n  fibaro:log(ambtempLabel..' / '..modeIcon..' / '..onOffLabel)\n\n  -- actualizar iconON\n  local currentIcon = iconOFF\n  if onOffLabel == 'ON' then currentIcon = iconON end\n  fibaro:call(_selfId, 'setProperty', \"currentIcon\", currentIcon)\n\n  -- watchDog\n  fibaro:debug('termostatoAA OK')\n\n  -- actualizar cada...\n  fibaro:sleep(10 * 1000)\n\n  -- resetear  log\n  fibaro:log('')\n\nend\n\n-- ❄️💧☀️♻️\n","ui.idLabel.value":"id: 266","ui.modeLabel.value":"Status:ON Mode:❄️ Fan:4","ui.tempLabel.value":"26.5ºC / 27.0ºC","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"","name":"tempLabel","favourite":false,"main":false}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"","name":"modeLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":3,"lua":true,"waitForResponse":false,"caption":"-🌡","name":"downTempButton","empty":false,"msg":"--[[ termostatoAA\n\tDispositivo virtual\n\tdownTempButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nfunction getSetAA(option, functionName, argument)\n  if argument then argument = ','..argument else argument = '' end\n  local command = option..',1:'..functionName..argument..'\\r\\n'\n  local ip = fibaro:getValue(_selfId, 'IPAddress')\n  local port = fibaro:getValue(_selfId, 'TCPPort')\n  tcpSocket = Net.FTcpSocket(ip, port)\n  tcpSocket:setReadTimeout(1000)\n  result, errCode = tcpSocket:write(command)\n  statusLabel, statusErr = tcpSocket:read()\n  tcpSocket:disconnect()\n  if errCode == 0 then\n    return statusLabel, statusErr\n  end\n  return 'Err', errCode\nend\n\n-- obtener temperatura consigna\nstatusLabel, statusErr = getSetAA('GET', 'SETPTEMP')\nfibaro:debug(statusErr..': '..statusLabel)\nlocal p2 = string.find(statusLabel, 'SETPTEMP,')\nlocal setpTemp = tonumber(string.sub(statusLabel, p2 + 9 ))\n\n-- si no hay error\nif statusErr == 0 then\n  -- Comprobar temperatura mínima\n  local minTemp = 18 * 10\n  if setpTemp > minTemp then\n    -- bajar temperatura de consigna\n    fibaro:debug('Bajando...')\n    getSetAA('SET', 'SETPTEMP', setpTemp - 10)\n  else\n    -- informar\n    fibaro:debug('Temperatura mínima')\n  end\n\n  -- esperar acción\n  fibaro:sleep(1500)\n\n  -- formato a la temperatura origen\n  setpTemp = string.format('%.1f', setpTemp / 10)..'ºC'\n\n  -- obtener estado despues de accion\n  statusLabel, statusErr = getSetAA('GET', 'SETPTEMP')\n  local p2 = string.find(statusLabel, 'SETPTEMP,')\n  local newSetpTemp = tonumber(string.sub(statusLabel, p2 + 9 ))\n\n  -- formato temperatura destino\n  newSetpTemp = string.format('%.1f', newSetpTemp / 10)..'ºC'\n\n  -- obtener etiqueta actual\n  local tempLabel = fibaro:get(_selfId, \"ui.tempLabel.value\")\n\n  -- actualizar etiqueta de temperatura\n  -- 31.0ºC / 25.0ºC\n  tempLabel = string.gsub(tempLabel,\n   '/ '..setpTemp, '/ '..newSetpTemp)\n  fibaro:debug(tempLabel)\n  fibaro:call(_selfId, \"setProperty\", \"ui.tempLabel.value\", tempLabel)\nelse\n  fibaro:debug('Error: '..errCode..' '..statusErr)\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":4,"lua":true,"waitForResponse":false,"caption":"+🌡","name":"upTempButton","empty":false,"msg":"--[[ termostatoAA\n\tDispositivo virtual\n\tdownTempButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nfunction getSetAA(option, functionName, argument)\n  if argument then argument = ','..argument else argument = '' end\n  local command = option..',1:'..functionName..argument..'\\r\\n'\n  local ip = fibaro:getValue(_selfId, 'IPAddress')\n  local port = fibaro:getValue(_selfId, 'TCPPort')\n  tcpSocket = Net.FTcpSocket(ip, port)\n  tcpSocket:setReadTimeout(1000)\n  result, errCode = tcpSocket:write(command)\n  statusLabel, statusErr = tcpSocket:read()\n  tcpSocket:disconnect()\n  if errCode == 0 then\n    return statusLabel, statusErr\n  end\n  return 'Err', errCode\nend\n\n-- obtener temperatura\nstatusLabel, statusErr = getSetAA('GET', 'SETPTEMP')\nfibaro:debug(statusErr..': '..statusLabel)\nlocal p2 = string.find(statusLabel, 'SETPTEMP,')\nlocal setpTemp = tonumber(string.sub(statusLabel, p2 + 9 ))\n\n-- si no hay error\nif statusErr == 0 then\n  -- Comprobar temperatura mínima\n  local maxTemp = 30 * 10\n  if setpTemp < maxTemp then\n    -- subir temperatura de consigna\n    fibaro:debug('Subiendo...')\n    getSetAA('SET', 'SETPTEMP', setpTemp + 10)\n  else\n    -- informar\n    fibaro:debug('Temperatura máxima')\n  end\n\n  -- esperar acción\n  fibaro:sleep(1500)\n\n  -- formato a la temperatura origen\n  setpTemp = string.format('%.1f', setpTemp / 10)..'ºC'\n\n  -- obtener estado despues de accion\n  statusLabel, statusErr = getSetAA('GET', 'SETPTEMP')\n  local p2 = string.find(statusLabel, 'SETPTEMP,')\n  local newSetpTemp = tonumber(string.sub(statusLabel, p2 + 9 ))\n\n  -- formato temperatura destino\n  newSetpTemp = string.format('%.1f', newSetpTemp / 10)..'ºC'\n\n  -- obtener etiqueta actual\n  local tempLabel = fibaro:get(_selfId, \"ui.tempLabel.value\")\n\n  -- actualizar etiqueta de temperatura\n  -- 31.0ºC / 25.0ºC\n  tempLabel = string.gsub(tempLabel,\n   '/ '..setpTemp, '/ '..newSetpTemp)\n  fibaro:debug(tempLabel)\n  fibaro:call(_selfId, \"setProperty\", \"ui.tempLabel.value\", tempLabel)\n  else\n  fibaro:debug('Error: '..errCode..' '..statusErr)\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":5,"lua":true,"waitForResponse":false,"caption":"ON/OFF","name":"onOffButton","empty":false,"msg":"--[[ termostatoAA\n\tDispositivo virtual\n\toNOFFButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nfunction getSetAA(option, functionName, argument)\n  if argument then argument = ','..argument else argument = '' end\n  local command = option..',1:'..functionName..argument..'\\r\\n'\n  local ip = fibaro:getValue(_selfId, 'IPAddress')\n  local port = fibaro:getValue(_selfId, 'TCPPort')\n  tcpSocket = Net.FTcpSocket(ip, port)\n  tcpSocket:setReadTimeout(1000)\n  result, errCode = tcpSocket:write(command)\n  statusLabel, statusErr = tcpSocket:read()\n  tcpSocket:disconnect()\n  if errCode == 0 then\n    return statusLabel, statusErr\n  end\n  return 'Err', errCode\nend\n\n-- recuperar el estado actual\nstatusLabel, statusErr = getSetAA('GET', 'ONOFF')\n\n-- si no hay error\nif statusErr == 0 then\n  -- Comprobar el estado CHN,1:ONOFF,OFF\n  local p2 = string.find(statusLabel, 'ONOFF,')\n  local statusLabel = string.sub(statusLabel, p2 + 6 )\n  -- mostrar estado antes de acción\n  fibaro:debug('-'..statusLabel..'-')\n  -- si está encendifo ON\n  if string.sub(statusLabel, 1, 2) == 'ON' then\n    -- apagar\n    fibaro:debug('Apagando...')\n    getSetAA('SET', 'ONOFF', 'OFF')\n  else\n    -- encender\n    fibaro:debug('Encendiendo...')\n    getSetAA('SET', 'ONOFF', 'ON')\n  end\n  -- esperar acción\n  fibaro:sleep(2000)\n  -- mostrar estado despues de accion\n  statusLabel, statusErr = getSetAA('GET', 'ONOFF')\n  fibaro:debug(statusErr..': '..statusLabel)\nelse\n  fibaro:debug('Error: '..errCode..' '..statusErr)\nend\n","buttonIcon":0,"favourite":false,"main":true}]},{"type":"button","elements":[{"id":6,"lua":true,"waitForResponse":false,"caption":"- ♻️","name":"downFanButton","empty":false,"msg":"--[[ termostatoAA\n\tDispositivo virtual\n\tdownFanButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nfunction getSetAA(option, functionName, argument)\n  if argument then argument = ','..argument else argument = '' end\n  local command = option..',1:'..functionName..argument..'\\r\\n'\n  local ip = fibaro:getValue(_selfId, 'IPAddress')\n  local port = fibaro:getValue(_selfId, 'TCPPort')\n  tcpSocket = Net.FTcpSocket(ip, port)\n  tcpSocket:setReadTimeout(1000)\n  result, errCode = tcpSocket:write(command)\n  statusLabel, statusErr = tcpSocket:read()\n  tcpSocket:disconnect()\n  if errCode == 0 then\n    return statusLabel, statusErr\n  end\n  return 'Err', errCode\nend\n\n-- obtener velocidad ventilador\nstatusLabel, statusErr = getSetAA('GET', 'FANSP')\nfibaro:debug(statusErr..': '..statusLabel)\nlocal p2 = string.find(statusLabel, 'FANSP,')\nlocal fanspLabel = string.sub(statusLabel, p2 + 6, #statusLabel - 2)\n-- ajustar la etiqueta a un número\nlocal fanSpeed\nif fanspLabel == 'AUTO' then\n  fanSpeed = 5\nelse\n  fanSpeed = tonumber(fanspLabel)\nend\n\n-- si no hay error\nif statusErr == 0 then\n  -- Comprobar velocidad mínima 1, 2, 3, 4, AUTO = 5\n  local minSpeed = 1\n  -- ajustar ventilador\n  if fanSpeed > minSpeed then\n    getSetAA('SET', 'FANSP', fanSpeed - 1)\n  else\n    getSetAA('SET', 'FANSP', 'AUTO')\n  end\n\n  -- volver a poner AUTO si el valor es 5\n  if fanSpeed == 5 then fanSpeed = 'AUTO' end\n\n  -- esperar acción\n  fibaro:sleep(1500)\n\n  -- obtener estado despues de accion\n  statusLabel, statusErr = getSetAA('GET', 'FANSP')\n  fibaro:debug(statusErr..': '..statusLabel)\n  local p2 = string.find(statusLabel, 'FANSP,')\n  local fanspLabel = string.sub(statusLabel, p2 + 6, #statusLabel -2)\n  if fanspLabel == 'AUTO' then fanspLabel = 'A' end\n\n  -- obtener etiqueta actual\n  local modeLabel = fibaro:get(_selfId, \"ui.modeLabel.value\")\n\n  -- actualizar etiqueta de estado modo y velocidad ventilador\n  --Status:OFF Mode:AUTO Fan:AUTO\n  modeLabel = string.gsub(modeLabel, 'Fan:'..fanSpeed, 'Fan:'..fanspLabel)\n  fibaro:debug(modeLabel)\n  fibaro:call(_selfId, \"setProperty\", \"ui.modeLabel.value\", modeLabel)\nelse\n  fibaro:debug('Error: '..errCode..' '..statusErr)\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":7,"lua":true,"waitForResponse":false,"caption":"+ ♻️","name":"Button22","empty":false,"msg":"--[[ termostatoAA\n\tDispositivo virtual\n\tdownFanButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nfunction getSetAA(option, functionName, argument)\n  if argument then argument = ','..argument else argument = '' end\n  local command = option..',1:'..functionName..argument..'\\r\\n'\n  local ip = fibaro:getValue(_selfId, 'IPAddress')\n  local port = fibaro:getValue(_selfId, 'TCPPort')\n  tcpSocket = Net.FTcpSocket(ip, port)\n  tcpSocket:setReadTimeout(1000)\n  result, errCode = tcpSocket:write(command)\n  statusLabel, statusErr = tcpSocket:read()\n  tcpSocket:disconnect()\n  if errCode == 0 then\n    return statusLabel, statusErr\n  end\n  return 'Err', errCode\nend\n\n-- obtener velocidad ventilador\nstatusLabel, statusErr = getSetAA('GET', 'FANSP')\nfibaro:debug(statusErr..': '..statusLabel)\nlocal p2 = string.find(statusLabel, 'FANSP,')\nlocal fanspLabel = string.sub(statusLabel, p2 + 6, #statusLabel - 2)\n-- ajustar la etiqueta a un número\nlocal fanSpeed\nif fanspLabel == 'AUTO' then\n  fanSpeed = 5\nelse\n  fanSpeed = tonumber(fanspLabel)\nend\n\n-- si no hay error\nif statusErr == 0 then\n  -- Comprobar velocidad mínima 1, 2, 3, 4, AUTO = 5\n  local maxSpeed = 5\n  -- ajustar ventilador\n  if fanSpeed < maxSpeed then\n    if fanSpeed + 1 >= maxSpeed then\n      getSetAA('SET', 'FANSP', 'AUTO')\n    else\n      getSetAA('SET', 'FANSP', fanSpeed + 1)\n    end\n  else\n    getSetAA('SET', 'FANSP', 1)\n  end\n\n  -- volver a poner AUTO si el valor es 5\n  if fanSpeed == 5 then fanSpeed = 'AUTO' end\n\n  -- esperar acción\n  fibaro:sleep(1500)\n\n  -- obtener estado despues de accion\n  statusLabel, statusErr = getSetAA('GET', 'FANSP')\n  fibaro:debug(statusErr..': '..statusLabel)\n  local p2 = string.find(statusLabel, 'FANSP,')\n  local fanspLabel = string.sub(statusLabel, p2 + 6, #statusLabel -2)\n  if fanspLabel == 'AUTO' then fanspLabel = 'A' end\n\n  -- obtener etiqueta actual\n  local modeLabel = fibaro:get(_selfId, \"ui.modeLabel.value\")\n\n  -- actualizar etiqueta de estado modo y velocidad ventilador\n  --Status:OFF Mode:AUTO Fan:AUTO\n  modeLabel = string.gsub(modeLabel, 'Fan:'..fanSpeed, 'Fan:'..fanspLabel)\n  fibaro:debug(modeLabel)\n  fibaro:call(_selfId, \"setProperty\", \"ui.modeLabel.value\", modeLabel)\nelse\n  fibaro:debug('Error: '..errCode..' '..statusErr)\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":8,"lua":true,"waitForResponse":false,"caption":"❄️💧☀️♻️","name":"modeButton","empty":false,"msg":"--[[ termostatoAA\n\tDispositivo virtual\n\tmodeButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nfunction getSetAA(option, functionName, argument)\n  if argument then argument = ','..argument else argument = '' end\n  local command = option..',1:'..functionName..argument..'\\r\\n'\n  local ip = fibaro:getValue(_selfId, 'IPAddress')\n  local port = fibaro:getValue(_selfId, 'TCPPort')\n  tcpSocket = Net.FTcpSocket(ip, port)\n  tcpSocket:setReadTimeout(1000)\n  result, errCode = tcpSocket:write(command)\n  statusLabel, statusErr = tcpSocket:read()\n  tcpSocket:disconnect()\n  if errCode == 0 then\n    return statusLabel, statusErr\n  end\n  return 'Err', errCode\nend\n\n-- obtener modo\nstatusLabel, statusErr = getSetAA('GET', 'MODE')\nfibaro:debug(statusErr..': '..statusLabel)\nlocal p2 = string.find(statusLabel, 'MODE,')\nlocal modeLabel = string.sub(statusLabel, p2 + 5, #statusLabel - 2)\n\n-- si no hay error\nif statusErr == 0 then\n\tlocal modesText = {mode}\n\tmodesText[1] = 'COOL'; modesText[2] = 'DRY'; modesText[3] = 'HEAT'\n\tmodesText[4] = 'FAN'; modesText[5] = 'AUTO'\n\tlocal modesNum = {num}\n\tmodesNum['COOL'] = 1; modesNum['DRY'] = 2; modesNum['HEAT'] = 3\n\tmodesNum['FAN'] = 4; modesNum['AUTO'] = 5\n\tlocal modesIcon = {icon}\n\tmodesIcon[1] = '❄️'; modesIcon[2] = '💧'; modesIcon[3] = '☀️';\n\tmodesIcon[4] = '♻️'; modesIcon[5] = 'A'\n\tlocal modeNum = modesNum[modeLabel]\n\tlocal modeText = modesText[modeNum]\n\tlocal modeIcon = modesIcon[modeNum]\n\n\t-- cambiar al siguiente modo\n\tfibaro:debug('Cambiando...')\n\tif modeNum + 1 > #modesText then\n\t\tgetSetAA('SET', 'MODE', modesText[1])\n\telse\n\t\tgetSetAA('SET', 'MODE', modesText[modeNum + 1])\n\tend\n\n\t-- esperar a que se aplique la acción\n  fibaro:sleep(1500)\n\n\t-- obtener modo después de aplicar acción\n\tstatusLabel, statusErr = getSetAA('GET', 'MODE')\n  fibaro:debug(statusErr..': '..statusLabel)\n  local p2 = string.find(statusLabel, 'MODE,')\n  local newModeText = string.sub(statusLabel, p2 + 5, #statusLabel - 2)\n\tlocal newModeNum = modesNum[newModeText]\n\tlocal newModeIcon = modesIcon[newModeNum]\n\n\t-- obtener etiqueta actual\n  local modeLabel = fibaro:get(_selfId, \"ui.modeLabel.value\")\n\n\t-- actualizar etiqueta de estado modo y velocidad ventilador\n  --Status:OFF Mode:AUTO Fan:AUTO\n  modeLabel = string.gsub(modeLabel, 'Mode:'..modeIcon, 'Mode:'..newModeIcon)\n  fibaro:debug(modeLabel)\n  fibaro:call(_selfId, \"setProperty\", \"ui.modeLabel.value\", modeLabel)\nelse\n\tfibaro:debug('Error: '..errCode..' '..statusErr)\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":9,"lua":false,"waitForResponse":false,"caption":"","name":"idLabel","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}